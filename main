#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#include <time.h>
#include<windows.h>
#include<ctype.h>

typedef struct node
{
    char words[50];             //Stores the word
    struct node *nextWord;    //Pointer to next word
}node;


node *heads[26];    //26 head pointers that is 1 pointer for each linked list
node *tails[26];    //26 tail pointers that is 1 pointer for each linked list for easy addition to end of list

void headTailInitializer(); //Set head and tails to null
void loader();
void checker();
void headchecker();
void checker();
void document_loader();

typedef struct document
{
    char docWord[50];                    //To store word
    int check;                           //To check if word exists in our dictionary or not
    struct document *next;               //Pointer to next word
}document;

document *docHead = NULL;
document *docTail = NULL;
document *temp = NULL;

int main()
{
    headTailInitializer();
    loader();
    headchecker();

    document_loader();
}

void document_loader()
{
    char *documentpath = "C:\\Users\\Himanshu Chhatpar\\Desktop\\c++\\DS_Project\\texts\\aca.txt";
    FILE *document = fopen(documentpath,"r");
    char ch;
    int i=0;
    char word[50];

    while((ch = fgetc(document)) != EOF)
    {
        if(ch != ' ' || ch != '\n')
        {
            word[i] = ch;
            word[i+1] = '\0';
            i++;
        }
        else
        {
            //Word formation is complete
            temp = malloc(sizeof(document));

            if(docHead == NULL)
            {
                docHead = temp;
                docTail = temp;
                docHead->next = NULL;
                docHead->check = -1;     //-1 to represent unchecked

                //Copying word
                for(int j=0;j<i;j++)
                {
                    docHead->docWord[j] = word[j];
                }

            }
            else
            {
                docTail->next = temp;
                docTail = temp;
                docTail->next = NULL;
                docTail->check = -1;

                //Copying word
                for(int j=0;j<i;j++)
                {
                    docHead->docWord[j] = word[j];
                }

            }
            i=0;   //Now comes a new word
        }

    }


}

void headTailInitializer(void)
{
    printf("Reached heat tail initiliaxer function\n");
    for(int i=0;i<=25;i++)
    {
        heads[i] = NULL;
        tails[i] = NULL;
    }
}

void loader()
{
    char *path = "C:\\Users\\UserName\\Desktop\\c++\\DS_Project\\dictionaries\\dict++.txt";   //Actual path of noteDict File
    char ch;
    char word[50];                      //To store the whole word on temporary basis
    char startingAlphabet;
    int counter = 0;



    int i=0;
    word[i] = '\0';  //Setting initial word to empty string
    FILE *ptr = fopen(path,"r");


    if(ptr == NULL)
    {
    printf("it is null");
    exit(0);
    }

    printf("Reached reading contents of file\n");
    //If file exist read the file
    while((ch = fgetc(ptr)) != EOF)
    {
        ch = tolower(ch);
        if((ch >= 'a' && ch <= 'z') || ch == '\'' || ch == '-')
        {
            word[i] = ch;
            word[i+1] = '\0';
            i++;
        }
        else if(ch == '\n')
        {
            //Word is formed completely and we add word to linked list
            counter = (int)word[0] - 'a';
            if(heads[counter] == NULL)
            {
                //Initializing a linked list with head and tail pointing to the first word
                node *holder = (node *)malloc(sizeof(node));
                heads[counter] = holder;
                tails[counter] = holder;

                //Copying the word
                for(int j=0;j<i;j++)
                {
                    holder->words[j] = word[j];
                    holder->words[j+1] = '\0';
                }
                holder->nextWord = NULL;
            }

            else
            {
                //List has only one element
                node *holder = (node *)malloc(sizeof(node));
                tails[counter]->nextWord = holder;
                tails[counter] = holder;

                //Copying the word to holder
                for(int j=0;j<i;j++)
                {
                    holder->words[j] = word[j];
                    holder->words[j+1] = '\0';
                }
                holder->nextWord = NULL;
            }

            //printf("%s\n",word);
            i = 0;
        }
        else
        {
            //Ignore non ascii characters
            printf("Error due to: %c\n",ch);
        }
}
}

void headchecker()
{
    for(int i=0;i<26;i++)
    {
        printf("Head value: %s\tTail value: %s\n",heads[i]->words,tails[i]->words);
    }
}
